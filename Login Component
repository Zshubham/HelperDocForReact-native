import AsyncStorage from '@react-native-community/async-storage';
import React, {useState, useEffect, useRef} from 'react';
import {
  View,
  TextInput,
  Text,
  SafeAreaView,
  Animated,
  TouchableWithoutFeedback,
  TouchableOpacity,
  Keyboard,
  Platform,
  Dimensions,
  Linking
} from 'react-native';
import SignUpStyles from '../src/SignUp/SignUpStyles';
import {AppRoutes} from './NavigatorContainer';
import {
  Constant,
  keyboardWillHide,
  keyboardWillShow,
} from '../strings/Constants';
import APIRequest, {profileurl,  adminurl} from '../strings/ApiCalls';
import {NavigationScreenProp, useFocusEffect } from '@react-navigation/native';
import {useUIElements} from './providers/UIElementsProvider';
import {ScrollView} from 'react-native-gesture-handler';
import {LocalStrings} from '../strings/LocalStrings';
import {callToast, closeToast} from '../strings/Constants';
import { useSelector, useDispatch } from 'react-redux';

import {Login} from './actions';

const window = Dimensions.get('window');
export const IMAGE_HEIGHT = window.height / 10;
export const IMAGE_WIDTH = window.width / 3;
export const IMAGE_HEIGHT_SMALL = window.width / 7; 
const styles = SignUpStyles;
let imageHeight = new Animated.Value(IMAGE_HEIGHT);
let keyboardWillShowSub;
let keyboardWillHideSub;
let keyboardHeight = new Animated.Value(0);
export interface OnboardingProps extends NavigationScreenProp {
  navigation: any;
}
export const LoginSample: React.FC<OnboardingProps> = props => {
  const dispatch = useDispatch();
  const token = useSelector((state) => state.auth.token);

  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const {
    setLoading,
    setCBottomShow,
    setAppProfilePic,
    setAppProfileEmail,
    setAppProfileName,
    setAppfamiliesMembers,
    setMessage,
    setFail,
    setTitle,
    setdeepapplinkdata

  } = useUIElements();
  const ref_input2 = useRef<any>(null);
  useEffect(() => {
    setLoading(false);
  }, []);
  useEffect(() => {
    if (Platform.OS == 'ios') {
      keyboardWillShowSub = Keyboard.addListener(
        'keyboardWillShow',
        keyboardWillShow,
      );
      keyboardWillHideSub = Keyboard.addListener(
        'keyboardWillHide',
        keyboardWillHide,
      );
    } 
  }, []);

  const myhandler =(event) => {
    //console.log(token.length, 'token addEventListener');
     setdeepapplinkdata(event.url);
    if (event.url && event.url.includes(adminurl)  && props.route.name === 'LoginSample') {
      callToast();
      setTitle('red');
      setFail(true);
      setLoading(false);
      setMessage(
        'To view your script, register or login first',
      );
      setTimeout(() => { 
        closeToast(); 
        setFail(false);
      }, 5000);
    }
  }
  useFocusEffect(React.useCallback(() => {
    //console.log(token.length, 'token addEventListener');
    Linking.addEventListener('url', myhandler);
    Linking.getInitialURL().then(url => {
      console.log(url, '1getInitialURL');
      if (url  && props.route.name ==='LoginSample') {
        callToast();
        setTitle('red');
        setFail(true);
        setLoading(false);
        setMessage(
          'To view your script, register or login first',
        );
        setTimeout(() => {
          closeToast(); 
          
          setFail(false);
        }, 5000);
      }
    });

    return () => Linking.removeEventListener('url',myhandler);   
  },[]));


  const loginApp = () => { 
 
    var loginData = {
      username: email,
      password: password,
    };
    dispatch(Login(loginData,
       (item)=>setLoading(item),
        (item)=>setAppProfilePic(profileurl + item),
         (item)=>setAppProfileName(item),
         (item)=>setAppProfileEmail(item),
         (item)=> setAppfamiliesMembers(item),
         () =>  props.navigation.replace(AppRoutes.TabBar, {
          secondtime: 'newaddress',
        }),
         (one,two)=> commonMeassge(one,two),
          (item)=> setFail(item),
          ()=>props.navigation.push(AppRoutes.Resend,{
            email:email,
            password:password
          })
         ))

      }

  const commonMeassge = (message, title) => {
    callToast();
    setTitle(title);
    setFail(true);
    setLoading(false);
    setMessage(message);
    setTimeout(() => {
      closeToast();
      setFail(false);
    }, 2000);
  };
  return (
    <View style={styles.loginMainView}>
      <SafeAreaView style={styles.loginMainView}>
        <ScrollView>
          <TouchableWithoutFeedback
            style={{flex: 1}}
            onPress={() => {
              Keyboard.dismiss();
            }}>
            <Animated.View
              style={[styles.container, {paddingBottom: keyboardHeight}]}>
              <Animated.Image
                source={require('../ui/icons/medmate_logo_blue.png')}
                style={[
                  {
                    height: IMAGE_HEIGHT,
                    width: IMAGE_WIDTH,
                    resizeMode: 'contain',
                    alignSelf: 'center',
                    marginBottom: 50,
                    padding: 10,
                    marginTop: 20,
                  },
                  {height: imageHeight},
                ]}
              />
              <Text style={styles.newmedmate}>{'New to Medmate?'}</Text>
              <View>
                <TouchableOpacity
                  onPress={() => {
                    props.navigation.push(AppRoutes.SignUpFormScreen);
                  }}>
                  <Text style={styles.create}>{'Create an account'}</Text>
                </TouchableOpacity>
              </View>
              <Text style={styles.signintext}>Sign In</Text>
              <Text style={styles.subheading}>Email</Text>
              <View style={[styles.SectionStyle, {bottom: 16, width: '90%'}]}>
                <TextInput
                  style={[
                    styles.commonInput,
                    {color: 'black', marginRight: 40},
                  ]}
                  keyboardType="email-address"
                  underlineColorAndroid="transparent"
                  placeholderTextColor="rgb(115, 118, 131)"
                  value={email}
                  returnKeyType={'next'}
                  onSubmitEditing={() => ref_input2.current.focus()}
                  onChangeText={value => setEmail(value)}
                />
              </View>
              <Text style={[styles.subheading, {top: 1}]}>Password</Text>
              <View style={styles.SectionStyle}>
                <TextInput
                  style={[
                    styles.commonInput,
                    {color: 'black', marginRight: 40},
                  ]}
                  keyboardType="default"
                  underlineColorAndroid="transparent"
                  placeholderTextColor="rgb(115, 118, 131)"
                  value={password}
                  ref={ref_input2}
                  secureTextEntry={true}
                  maxLength={15}
                  returnKeyType={'next'}
                  onChangeText={value => {
                    setPassword(value);
                  }}
                />
              </View>
              <View style={{marginHorizontal: 20}}>
                <TouchableOpacity
                  style={styles.forgotpasswordstyle}
                  onPress={() => {
                    props.navigation.push(AppRoutes.ForgotPassword);
                  }}>
                  <Text style={styles.forgottext}>
                    {LocalStrings.Login.forgot}
                  </Text>
                </TouchableOpacity>
                <View style={{width: '100%'}}>
                  <TouchableOpacity
                    style={styles.loginButton}
                    onPress={() => {
                     
                      APIRequest.netWorkCheck()
                        .fetch()
                        .then(result => {
                          if (result.isConnected) {
                            if (email.length == 0 || password.length == 0) {
                              commonMeassge(
                                'All field are required',
                                'red',
                              );
                            } else if (Constant.reg.test(email) === false) {
                              commonMeassge('Invalid email address', 'red');
                            } else if (password.length < 6) {
                              commonMeassge(
                                'Password should be more than 6 characters',
                                'red',
                              );
                            } else {
                              Keyboard.dismiss();
                              loginApp();
                            }
                          } else {
                            setCBottomShow(true);
                            callToast();
                            setTimeout(() => {
                              setCBottomShow(false);
                            }, 2000);
                          }
                        });
                    }}>
                    <Text style={styles.getbutton}>
                      {LocalStrings.Login.login}
                    </Text>
                  </TouchableOpacity>
                </View>
                <View> 
                {/* <TouchableOpacity
                  onPress={() => {
                    APIRequest.fireLog('Continue_as_guest', 'Loginsample', ''),
                    Linking.canOpenURL('http://Medmate.com.au/fill-script').then(supported => {
                      if (supported) {
                        Linking.openURL('http://Medmate.com.au/fill-script');
                      } else {
                        console.log("Don't know how to open URI: " + 'http://Medmate.com.au/fill-script');
                      }
                    });
                  }}>
                  <Text style={[styles.create,{textDecorationLine: 'none',marginTop:20}]}>{'Continue as guest'}</Text>
                </TouchableOpacity> */}
              </View>
              </View>
            </Animated.View>
          </TouchableWithoutFeedback>
        </ScrollView>
      </SafeAreaView>
    </View>
  );
};
