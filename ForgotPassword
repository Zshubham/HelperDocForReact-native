import React, { useState } from 'react';
import {
    Image,
    KeyboardAvoidingView,
    Platform,
    SafeAreaView,
    Text,
    TouchableOpacity,
    View, ScrollView, TextInput, Animated, Dimensions, TouchableWithoutFeedback, Keyboard
} from 'react-native';
import { NavigationScreenProp } from '@react-navigation/native';
import { Header } from '../../ui/Header';
import { AppRoutes } from '../NavigatorContainer';
import SignUpStyles from '../SignUp/SignUpStyles';
import { Constant, callToast, closeToast } from '../../strings/Constants';
import APIRequest, { apiBaseUrl } from '../../strings/ApiCalls';
import { theme } from '../../theme/theme';
import { colors } from '../../theme/colors';
import { useUIElements } from '../providers/UIElementsProvider';
import { LocalStrings } from '../../strings/LocalStrings';
const styles = SignUpStyles;
const window = Dimensions.get('window');
export const IMAGE_HEIGHT = window.width / 2;
export const IMAGE_HEIGHT_SMALL = window.width / 7;
export interface OnboardingProps extends NavigationScreenProp {
    navigation: any;
}
export const ForgotPassword: React.FC<OnboardingProps> = props => {
    const [email, setEmail] = useState<string>('');
    const { setCBottomShow, setLoading, message, setMessage, fail, setFail, title, setTitle } = useUIElements();
    const renderEmail = () => {
        return (
            <View style={{ top: 30, }}>
                <View >
                    <Text allowFontScaling={false} style={{ ...theme.fonts.SFProTextRegular(16), color: colors.FONT_BLUE, paddingTop: Platform.OS === 'ios' ? 10 : 5, paddingBottom: Platform.OS === 'ios' ? 10 : 0, marginLeft: 25, marginRight: 20 }}>{LocalStrings.Signup.email}</Text>
                    <View style={{
                        flexDirection: 'row',
                        justifyContent: 'center',
                        alignItems: 'center',
                        backgroundColor: 'white',
                        height: 45,
                        borderRadius: 5,
                        margin: 4,
                    }}>
                        <TextInput
                            style={[styles.commonInput, { color: 'black' , marginRight: 40}]}
                            keyboardType="email-address"
                            underlineColorAndroid="transparent"
                            placeholderTextColor="rgb(115, 118, 131)"
                            value={email}
                            returnKeyType={"next"}
                            onChangeText={value => {
                                setEmail(value);
                            }}
                        />
                    </View>
                </View>
                <TouchableOpacity
                    style={[styles.loginButton,{marginLeft:10}]}
                    onPress={() => {
                        APIRequest.netWorkCheck().fetch().then((result) => {
                            console.log(result.isConnected, "result");
                            if (result.isConnected) {
                                if (email.length === 0) {
                                    commonMeassge('Please enter your email.', 'red')
                                } else if (Constant.reg.test(email) === false) {
                                    commonMeassge('Email address invalid', 'red')
                                } else {
                                    userForgotMailMethod()
                                }
                            } else {
                                setCBottomShow(true)
                                callToast()
                                setTimeout(() => {
                                    setCBottomShow(false)
                                }, 2000);
                            }
                        })
                    }}>
                    <Text allowFontScaling={false} style={styles.getbutton}>{'Reset Password'}</Text>
                </TouchableOpacity>
                <View style={{ height: 30 }} />
            </View>
        );
    };
    const commonMeassge = (message, title) => {
        callToast()
        setTitle(title)
        setFail(true)
        setLoading(false);
        setMessage(message)
        setTimeout(() => {
            closeToast()
            setFail(false)
        }, 2000);
    }
    const userForgotMailMethod = async() => {
        var registerData = {
            "username": email,
        }
        setLoading(true)
      await   APIRequest.vmPostRequest(
            apiBaseUrl + 'forgotpassword',
            Constant.jsonheaders,
            JSON.stringify(registerData),
        )
            .then(result => {
                setLoading(false);
                if (result.status === 200) {
                    result.json().then(forgotSucees => {
                        console.log(forgotSucees,'----------')
                        if (forgotSucees.msg === 'Email does not exist.') {
                            commonMeassge('Email does not exist.', 'red')
                        } else {
                            commonMeassge('Please check your email to reset your password', 'green')
                            setTimeout(() => {
                                props.navigation.goBack()
                            }, 2000);
                        }
                    })
                } else if (result.status === 401) {
                    commonMeassge('User is not authorized', 'red')
                }
                else if (result.status === 500) {
                    commonMeassge('Something went wrong', 'red')
                }
            })
            .catch(error => {
                setLoading(false);
                console.log('-------- Forgot password error ------- ' + error);
            });
    }

    return (
        <View style={{ flex: 1}}>
            <KeyboardAvoidingView
                behavior={Platform.OS === "ios" ? "padding" : null}
                style={{ flex: 1, }}
            >
                <SafeAreaView style={styles.loginMainView}>
                    {<Header
                        headerStyle='secondary'
                        title="FORGOT PASSWORD"
                        leftIcon={'backArrow'}
                        onPressLeftIcon={() => {
                            props.navigation.push(AppRoutes.LoginSample)
                        }}
                    />}
                    <TouchableWithoutFeedback style={{ flex: 1, width: '100%' }} onPress={() => {
                        Keyboard.dismiss()
                    }}>
                        <View style={{ flex: 1 }}>
                            <Text style={{ ...theme.fonts.SFProTextMedium(16), color: colors.FONT_MIDNIGHT_BLUE, lineHeight: 25 , marginTop: 50, marginBottom: 50, marginLeft: 20, marginRight: 20}}>Please enter your email address. You will receive a link to create a new password via email.</Text>
                            {renderEmail()}
                        </View>
                    </TouchableWithoutFeedback>
                </SafeAreaView>
            </KeyboardAvoidingView>
        </View>
    );
};

